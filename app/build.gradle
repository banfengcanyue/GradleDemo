class ScriptGradlePlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        println "Method 1: Test gradle plugin in app module build.gradle"
    }
}

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    // 方式2：在 buildSrc 模块中写插件，只能在本地并引入
    id 'com.bfcy.gradle.buildSrc'
    // 方式3.1：在独立模块中写插件，并在本地引入（可以在根目录的build.gradle中引入，也可以在app模块的build.gradle中引入，同时引入会执行两次）
    // true-引入并执行，默认为true；false-引入不执行；
    // apply false代表此插件仅应用于构建中的部分或全部子model, 而不是root项目（该说法待确认）
//    id 'com.bfcy.gradle.standalone' apply true
}

// 方式1：直接在 app 模块 build.gradle 中写插件，并引用
// only buildscript {} and other plugins {} script blocks are allowed before plugins {} blocks,
apply plugin: ScriptGradlePlugin

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.bfcy.gradledemo"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    // 将根目录下的Gradle插件 classpath 'xxx' 放到这里，classpath 改为 implementation，就可以导入插件的源码
    implementation 'com.android.tools.build:gradle:7.1.2'
}

